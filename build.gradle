import com.github.spotbugs.SpotBugsTask


plugins {
    id 'application'

    id 'java'
//    id 'eclipse' // optional (to generate Eclipse project files)
//    id 'idea' // optional (to generate IntelliJ IDEA project files)

    // Test coverage
    id 'jacoco'

    // Code style
    id 'checkstyle'

    // PMD
    id 'pmd'

    // FindBugs / SpotBugs
    id 'com.github.spotbugs' version '2.0.1'

    id 'org.openjfx.javafxplugin' version '0.0.8'

}

group 'nl.tudelft.cse.sem.template'
version '1.0-SNAPSHOT'

sourceCompatibility = 12

repositories {
    mavenCentral()
}

test {
    useJUnitPlatform()

    systemProperty 'java.awt.headless', 'false'

    jacoco {
        enabled = true
        includes = ['*']
        excludes = ['gui.*']
    }
}

dependencies {
    //spark web server
    compile "com.sparkjava:spark-core:2.9.1"
    //spark debug tools, not compatible with latest version of spark
    //compile "com.sparkjava:spark-debug-tools:0.5"

    //logging framework
    compile "org.slf4j:slf4j-simple:1.7.29"
    //google collections library
    compile "com.google.guava:guava:19.0"
    //Bcrypt for hashing passwords
    compile "org.mindrot:jbcrypt:0.3m"
    //To encode and decode JSON strings
    compile "com.github.cliftonlabs:json-simple:3.1.0"
    //Websocket client
    compile "org.eclipse.jetty.websocket:websocket-client:9.4.24.v20191120"
    //mysql jdbc driver
    compile "mysql:mysql-connector-java:8.0.18"
    //mockito
    implementation 'org.mockito:mockito-core:3.2.0'
    //junit 5
    testImplementation('org.junit.jupiter:junit-jupiter:5.5.2')
    //spotbugs
    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.7.1'
}

javafx {
    version = "12"
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.base']
}

jacocoTestReport {
    classDirectories.setFrom(files(classDirectories.files.collect {
        fileTree(dir: it, exclude: ['gui'])
    }))
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = 'CLASS'
            includes = ['*']
            excludes = ['gui.*']

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 0.3
            }
        }
    }
}

checkstyle {
    toolVersion "8.25"
    configFile = rootProject.file('config/checkstyle/checkstyle.xml')
}

pmd {
    incrementalAnalysis = true
}

spotbugs {
    sourceSets = [sourceSets.main]
    ignoreFailures = false
    effort = "default"
    reportLevel = "high"
    visitors = ["FindSqlInjection", "SwitchFallthrough"]
    excludeFilter = file("$rootProject.projectDir/config/spotbugs/excludeFilter.xml")
}

tasks.withType(SpotBugsTask) {
    reports.xml.enabled = false
    reports.html.enabled = true
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

application {
    mainClassName = 'gui.Main'
}
